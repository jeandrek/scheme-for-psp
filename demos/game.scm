;;;; This code deserves a lot of tidying up.
;;;; Would need special forms LET and AND.

(define player-y 5)
(define player-x 5)
(define health 30)
(define score 0)

;;; This is probably really bad
(define random
  ((lambda (x)
     (lambda (max)
       (set! x (remainder (+ (* x 13) 32137) 1234567))
       (remainder x max)))
   5433291))

(define (make-goody x y)
  (define (goody)
    (if (if (= player-y y)
            (< (abs (- player-x x)) 2)
            #f)
        (begin
          (set! score (+ score 1))
          (list (make-goody (+ (random 63) 2) (+ (random 26) 3))))
        (begin
          (psp-screen-x-y x y)
          (psp-text-color 0 255 0)
          (display "*")
          (psp-text-color 255 255 255)
          (list goody))))
  goody)

(define (make-bomber)
  ((lambda (t)
     (define (bomber)
       (set! t (+ t 1))
       (if (> t 7)
           (begin
             (set! t 0)
             (list (make-bomb (+ (random 63) 2) (+ (random 26) 3) 30)
                   bomber))
           (list bomber)))
     bomber)
   0))

(define (make-bomb x y t)
  (define (bomb)
    (set! t (- t 1))
    (if (= t 0)
        (list (make-explosion x y))
        (begin
          (psp-screen-x-y x y)
          (display "o")
          (list bomb))))
  bomb)

(define (make-explosion x y)
  (define (explode1)
    (if (< (abs (- player-x x)) 4)
        (if (< (abs (- player-y y)) 4)
            (set! health
                  (max 0
                       (+ (- health 10)
                          (* 2 (max (abs (- player-x x))
                                    (abs (- player-y y)))))))))
    (psp-back-color 255 220 0)
    (psp-screen-x-y x y)
    (display " ")
    (psp-back-color 0 0 0)
    (list explode2))
 (define (explode2)
   (psp-screen-x-y x (- y 1))
   (psp-back-color 255 70 0)
   (display " ")
   (psp-screen-x-y (- x 1) y)
   (psp-back-color 255 70 0)
   (display " ")
   (psp-back-color 255 220 0)
   (display " ")
   (psp-back-color 255 70 0)
   (display " ")
   (psp-screen-x-y x (+ y 1))
   (psp-back-color 255 70 0)
   (display " ")
   (psp-back-color 0 0 0)
   (list explode3))
 (define (explode3)
   (psp-screen-x-y x (- y 2))
   (psp-back-color 255 70 0)
   (display " ")
   (psp-screen-x-y (- x 1) (- y 1))
   (psp-back-color 255 70 0)
   (display " ")
   (psp-back-color 255 220 0)
   (display " ")
   (psp-back-color 255 70 0)
   (display " ")
   (psp-screen-x-y (- x 2) y)
   (psp-back-color 255 70 0)
   (display " ")
   (psp-back-color 255 220 0)
   (display " ")
   (psp-back-color 255 255 255)
   (display " ")
   (psp-back-color 255 220 0)
   (display " ")
   (psp-back-color 255 70 0)
   (display " ")
   (psp-screen-x-y (- x 1) (+ y 1))
   (psp-back-color 255 70 0)
   (display " ")
   (psp-back-color 255 220 0)
   (display " ")
   (psp-back-color 255 70 0)
   (display " ")
   (psp-screen-x-y x (+ y 2))
   (psp-back-color 255 70 0)
   (display " ")
   (psp-back-color 0 0 0)
   '())
 explode1)

(define (player)
  (psp-screen-x-y (- player-x 1) player-y)
  (psp-back-color 255 255 0)
  (psp-text-color 0 0 0)
  (display ":-)")
  (psp-back-color 0 0 0)
  (psp-text-color 255 255 255)
  (list player))

(define (repeat-times n proc)
  (if (< 0 n)
      (begin
        (proc)
        (repeat-times (- n 1) proc))))

(define (render procs)
  (psp-vblank)
  (newline)
  (repeat-times 31 newline)
  (psp-back-color 0 130 130)
  (newline)
  (display "Health ")
  (display health)
  (display " Score ")
  (display score)
  (newline)
  (psp-back-color 0 0 0)
  ((lambda (procs)
     (psp-screen-x-y 0 0)
     procs)
   (flatten (map (lambda (proc) (proc)) procs))))

(define (flatten lsts)
  (cond ((null? lsts) '())
        ((null? (cdr lsts)) (car lsts))
        (else (append (car lsts) (flatten (cdr lsts))))))

;; (define (clamp-analog analog)
;;   (cons (if (< (abs (- (car analog) 128)) 32) 128 (car analog))
;;         (if (< (abs (- (cdr analog) 128)) 32) 128 (cdr analog))))

(define (control analog)
  ((lambda (dx dy)
     (set! player-x (max 1 (min 65 (- player-x dx))))
     (set! player-y (max 1 (min 32 (- player-y dy)))))
   (quotient (- 128 (car analog)) 80)
   (quotient (- 128 (cdr analog)) 80)))

(define (game procs)
  (if (= health 0)
      (game-over)
      (begin
        (control (psp-get-analog))
        ((lambda (procs)
           (delay-ms 25)
           (game procs))
         (render procs)))))

(define (game-over)
  (psp-screen-x-y 30 12)
  (display "GAME OVER")
  (psp-screen-x-y 31 13)
  (display "SCORE ")
  (display score)
  (psp-screen-x-y 24 15)
  (display "Press X to start again")
  (wait-for-x)
  (set! health 30)
  (set! score 0)
  (set! player-x 5)
  (set! player-y 5)
  (psp-clear)
  (game (list (make-bomber) player (make-goody 30 30))))

(define (wait-for-x)
  (if (not (eq? (psp-wait-button) 'cross))
      (wait-for-x)))

(psp-clear)
(game (list (make-bomber) player (make-goody 30 30)))
